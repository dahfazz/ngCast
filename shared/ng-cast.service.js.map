{"version":3,"file":"ng-cast.service.js","sourceRoot":"","sources":["ng-cast.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\ndeclare var mediaJSON: any;\n\n@Injectable()\nexport class NgCastService {\n  private cast: any;\n  private currentMedia: any;\n  private window: any = window;\n\n  public status = {\n    casting: false\n  };\n\n  constructor() {\n    \n  }\n\n  initializeCastApi() {\n    this.cast = this.window['chrome'].cast;\n    let sessionRequest = new this.cast.SessionRequest(this.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID);\n    let apiConfig = new this.cast.ApiConfig(sessionRequest,\n      () => { },\n      (status: any) => { if (status === this.cast.ReceiverAvailability.AVAILABLE) { } }\n    );\n    let x = this.cast.initialize(apiConfig, this.onInitSuccess, this.onError);\n  };\n\n  onInitSuccess = function () {\n    console.log('GCast initialization success');\n  };\n\n  onError = function (err: any) {\n    console.log('GCast initialization failed', err);\n  };\n\n  discoverDevices = () => {\n    let self: any = this;\n    let subj = new Subject();\n    this.cast.requestSession((s: any) => {\n      self.session = s;\n      self.setCasting(true);\n      subj.next('CONNECTED');\n    }, function (err: any) {\n      self.setCasting(false);\n      if (err.code === 'cancel') {\n        self.session = undefined;\n        subj.next('CANCEL');\n      } else {\n        console.error('Error selecting a cast device', err);\n      }\n    });\n    return subj;\n  };\n\n  onMediaDiscovered = (categories: any[]) => {\n    let script = window['document'].createElement('script');\n    script.setAttribute('type', 'text/javascript');\n    script.setAttribute('src', 'https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1');\n    window['document'].body.appendChild(script);\n\n    mediaJSON.categories = categories;\n  };\n\n  play = () => {\n    this.currentMedia.play(null);\n  };\n\n  pause = () => {\n    this.currentMedia.pause(null);\n  };\n\n  stop = () => {\n    this.currentMedia.stop(null);\n  };\n\n  onMediaError = (err: any) => {\n    console.error('Error launching media', err);\n  };\n\n  setCasting(value: any) {\n    this.status.casting = value;\n  }\n\n  getStatus() {\n    return this.status\n  }\n}\n"]}